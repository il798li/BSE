/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bse;

import bse.Listeners.Ready;
import bse.Listeners.SlashCommandInteraction;
import bse.Utility.FileUtility;
import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.JDABuilder;
import net.dv8tion.jda.api.requests.GatewayIntent;

import javax.security.auth.login.LoginException;
public class Main {
    public String getGreeting () {
        return "Hello World!";
    }

    public static void main (String[] args) {
        //https://discord.com/oauth2/authorize?client_id=1047925440393781268
        final String token = token ();
        final JDABuilder jdaBuilder = JDABuilder.create (token, GatewayIntent.getIntents (GatewayIntent.ALL_INTENTS));
        JDA jda;
        try {
            jda = jdaBuilder.build ();
        } catch (LoginException loginException) {
            debug ("Could not login using token: \"" + token + "\"");
            return;
        }

        {
            jda.addEventListener (new Ready ());
            jda.addEventListener (new SlashCommandInteraction ());
        }
    }

    public static void debug () {
        System.out.println ("\n");
    }

    public static void debug (final String debug) {
        final String startingString = "\t[Debug] ";
        StringBuilder formattedDebug = new StringBuilder (startingString);
        final int length = debug.length ();
        for (int index = 0; index < length; index++) {
            String character = debug.charAt (index) + "";
            boolean newLine = character.equals ("\n");
            if (newLine) {
                character += startingString;
            }
            formattedDebug.append (character);
        }
        System.out.println (formattedDebug);
    }

    public static String token () {
        final String token = FileUtility.readFile ("Token.txt");
        if (token.contains ("\n")) {
            final int index = token.indexOf ("\n");
            return token.substring (0, index);
        }
        return token;
    }

    public static void debug (final int debug) {
        debug ("" + debug);
    }

    public static void debug (final long debug) {
        debug ("" + debug);
    }

    public enum Category {
        Addition, //Carry method
        Subtraction, // Carry method
        Multiplication, //Carry method
        Division, //Long division
        Exponents, //using multiple multiplication/division operations
        PEMDAS,
        LinearEquations,
        Parabolas,
        Hyperbolas,
        Trigonometry,
        Limits,
        Differentiation,
        Integration,
    }
}
